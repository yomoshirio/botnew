from aiogram import types
from hashlib import md5
from aiogram.types import InlineQuery, InputTextMessageContent, InlineQueryResultArticle, InlineKeyboardMarkup, InlineKeyboardButton, InlineQueryResultPhoto
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
import os
from requests import get

from loader import bot, vip
from filters import IsBan
from keyboards import defaut as key, inline as menu
from data import get_user, User, messages as mes, amount_referals, get_user_sum
from utils import config, Catalog, SubCatalog, Product, Proxy, QiwiPay, \
    SMMPanel
from states import ActivatePromo, BuyCheating
from random import randint
from payok_handler import *

@vip.inline_handler(Text(startswith='product'))
async def inline_product_handler(q: InlineQuery):
    try:
        product_id = q.query.split(':')[1]
        products = await Product().get_amount_products(product_id)
        product = await Product().get_product(product_id)
        text = f'''<b>üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <code>{product[2]}</code>
<b>üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞</b>: <code>{product[3]}</code>‚ÇΩ
<b>‚ôªÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <code>{products}</code>

<b>üìú –û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{product[4]}</i>
'''
        input_content = InputTextMessageContent(text, parse_mode='HTML')
        result_id: str = md5(q.query.encode()).hexdigest()
        markup = InlineKeyboardMarkup().row(InlineKeyboardButton(text='üóù –û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä', url=f'https://t.me/CloudShopV4RoBot?start={product_id}'))
        item = InlineQueryResultArticle(id=result_id, title=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", thumb_url='https://i.imgur.com/zE0fUT3.jpg', input_message_content=input_content, reply_markup=markup)
        await bot.answer_inline_query(q.id, [item], is_personal=True, cache_time=5)
    except (TypeError, IndexError):
        pass

@vip.inline_handler(Text(startswith='ad'))
async def inline_ad_handler(q: InlineQuery):
    text = f'''<b>üõç Cloud shop —è–≤–ª—è–µ—Ç—Å—è –º–∞–≥–∞–∑–∏–Ω–æ–º —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ 

üî∏–ö–æ—à–µ–ª—å–∫–∏, –∫–∏–≤–∏, —é–º–∞–Ω–∏! 
üî∏–ö—É–ø–æ–Ω—ã, –ø—Ä–æ–º–æ–∫–æ–¥—ã! 
üî∏–ê–∫–∫–∞—É–Ω—Ç—ã, —Å–æ—Ü —Å–µ—Ç–µ–π!
üî∏–°–∫—Ä–∏–ø—Ç—ã –∏ –ø–∞–∫–∏ –±–æ—Ç–æ–≤! 
üî∏ –£—Å–ª—É–≥–∏ –Ω–∞–∫—Ä—É—Ç–∫–∏ 
üî∏–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥—Ä—É–≥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞! 

ü§ñ Cloud shop: <a href="https://t.me/CloudShopV4RoBot?start={q.query.split(":")[1]}"> @end_soft</a></b>
'''
    result_id: str = md5(q.query.encode()).hexdigest()
    markup = InlineKeyboardMarkup().row(InlineKeyboardButton(text='üìå –í—Å—Ç—É–ø–∏—Ç—å –≤ –±–æ—Ç–∞', url=f'https://t.me/CloudShopV4RoBot?start={q.query.split(":")[1]}'))
    item = InlineQueryResultPhoto(id=result_id, title=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç", photo_url='https://i.imgur.com/ouJD24f.jpg', thumb_url='https://i.imgur.com/ouJD24f.jpg', caption=text, reply_markup=markup)
    await bot.answer_inline_query(q.id, [item], is_personal=True, cache_time=5)

@vip.message_handler(state='sendreview')
async def sendreview(m: types.Message, state: FSMContext):
    txt = f'''<b>‚òëÔ∏è –û—Ç–∑—ã–≤ –≥–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{m.text}</code>'''
    await m.answer(text=txt, parse_mode="HTML", reply_markup=menu.gen_confirm_kb())
    await state.set_state('rconfirm')
    await state.update_data(rtext=m.text)

@vip.callback_query_handler(text='lr_confirm', state='rconfirm')
async def lr_confirm(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    txt = f'''<b>üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤:</b> 

<i>‚óΩÔ∏èUsername: @{c.from_user.username if c.from_user.username else '–ù–µ—Ç'}
‚óΩÔ∏èId: {c.from_user.id}
‚óΩÔ∏è–¢–æ–≤–∞—Ä: {data["pname"]}

üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {data["rtext"]}
</i>
'''
    await bot.send_message(chat_id=config.config("admin_group"), text=txt, parse_mode="HTML")
    await state.finish()
    await c.message.answer(f"<b>üéâ –û—Ç–∑—ã–≤ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–∂–∏–¥–∞–π—Ç–µ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏!</b>", parse_mode="HTML")

@vip.callback_query_handler(text='lr_deny', state='rconfirm')
async def lr_deny(c: types.CallbackQuery, state: FSMContext):
    await c.message.delete()
    await c.message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ.')
    await state.finish()

@vip.message_handler(state='asksend')
async def asksend(m: types.Message, state: FSMContext):
    data = await state.get_data()
    txt = f'''<b>‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:</b>

<i>‚óΩÔ∏è–¢–æ–≤–∞—Ä: {data['pname']}
‚óΩÔ∏èUsername: @{m.from_user.username if m.from_user.username else '–ù–µ—Ç'}
‚óΩÔ∏èId: {m.from_user.id}

üí≠ –°–æ–æ–±—â–µ–Ω–∏–µ:</i> {m.text}
'''
    await bot.send_message(chat_id=config.config("admin_group"), text=txt, parse_mode="HTML")
    await m.answer('''<b>‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É  

–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b> <i>–æ—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –≤ –±–æ—Ç–∞. –ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤! –û—Ç–≤–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤</i>''', parse_mode="HTML")
    await state.finish()

@vip.callback_query_handler(text='pay_CB', state='*')
async def paycb(call: types.CallbackQuery, state: FSMContext):
    text = f'''<b>üåê –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –ø–æ–º–æ—â—å—é @CryptoBot —Å–æ–∑–¥–∞–π—Ç–µ —á–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥! 

‚Ä¢ Ton (<a href="https://ton.org/">Toncoin</a>) 
‚Ä¢ Btc (<a href="https://bitcoin.org/">Bitcoin</a>)
‚Ä¢ Bnb (<a href="https://binance.org/">Binance coin</a>)
‚Ä¢ Busd (<a href="https://www.binance.com/en/busd">Binance USD</a>)
‚Ä¢ Usdc (<a href="https://www.centre.io/usdc">USD Coin</a>)
‚Ä¢ Usdt (<a href="https://tether.to/">Tether</a>)

üëâüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫</b>:
'''
    await call.message.edit_caption(caption=text, reply_markup=menu.close_markup())
    await state.finish()

@vip.callback_query_handler(text='dpayok', state='*')
async def payok_del(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()

@vip.callback_query_handler(text='promocancel', state='*')
async def promo_del(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()

@vip.callback_query_handler(text='payok_check', state='paycheck')
async def validate_payok(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    status = await is_valid_transaction(c.from_user.id, data['sumx'], data['desc'])
    if status:
        txxt = f"""<b>üí∞ –ù–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç 

‚óΩÔ∏è–°—É–º–º–∞: {data['sumx']}
‚óΩÔ∏è–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: PAYOK
‚óΩÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{User(c.from_user.id).username}
‚óΩÔ∏èID: {c.from_user.id}
‚óΩÔ∏è–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {User(c.from_user.id).balance} RUB
</b>
"""
        await c.answer(f'–ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω, –∑–∞—á–∏—Å–ª–µ–Ω–æ {data["sumx"]} —Ä—É–±–ª–µ–π', show_alert=True)
        await User(c.from_user.id).update_balance(data['sumx'])
        await QiwiPay().deposit_logs(c.from_user.id, 'qiwi', data['sumx'])
        await bot.send_message(chat_id=config.config('admin_group'),
                                                text=txxt)
        await c.message.delete()
        await state.finish()
    else:
        await c.answer('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.', show_alert=True)

@vip.callback_query_handler(IsBan())
async def handler_call(call: types.CallbackQuery, state: FSMContext):
    chat_id = call.from_user.id
    message_id = call.message.message_id

    if await get_user(chat_id) == True:
        user = User(chat_id)
        if user.ban == 'no':

            if call.data == 'payments':
                text = '<b>üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>'
                await call.message.edit_caption(caption=text, reply_markup=menu.payment_markup())

            if call.data == 'pay_btc':
                text = mes.btc_pay
                await call.message.edit_caption(caption=text, reply_markup=menu.close_markup())

            if call.data == 'pay_CB':
                text = f'''<b>üåê –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –ø–æ–º–æ—â—å—é @CryptoBot —Å–æ–∑–¥–∞–π—Ç–µ —á–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥! 

‚Ä¢ Ton (<a href="https://ton.org/">Toncoin</a>) 
‚Ä¢ Btc (<a href="https://bitcoin.org/">Bitcoin</a>)
‚Ä¢ Bnb (<a href="https://binance.org/">Binance coin</a>)
‚Ä¢ Busd (<a href="https://www.binance.com/en/busd"Binance USD</a>)
‚Ä¢ Usdc (<a href="https://www.centre.io/usdc">USD Coin</a>)
‚Ä¢ Usdt (<a href="https://tether.to/">Tether</a>)

üëâüèª –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫</b>:
'''
                await call.message.edit_caption(caption=text, reply_markup=menu.close_markup())
            
            if call.data == 'pay_WM':
                text = f'''üîò <b>–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è c –ø–æ–º–æ—â—å—é</b> <a href="https://www.webmoney.ru/">WebMoney</a>, <b>—Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ Wmz, —Å –∂–µ–ª–∞–µ–º–æ–π —Å—É–º–º–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. 

‚óæÔ∏è–°—á–µ—Ç:</b> <code>Z567188509029</code>

<b>üìä –ö—É—Ä—Å WMZ -</b> <code>66.56‚ÇΩ</code> <b>| 1 –®—Ç—É–∫–∞ 

üìö –°—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–æ–º –º–µ–Ω—å—à–µ –≤ 5 WMZ –±—É–¥—É—Ç —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—É.</b>'''
                await call.message.edit_caption(caption=text, reply_markup=menu.close_markup())
            
            if call.data == 'pay_DOGE':
                text = f'''<b>üê∂ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Doge coin, —Å–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É Doge. 

‚óæÔ∏è–ê–¥—Ä–µ—Å:</b> <code> DC3FBk7q7dqVCziNrycKgQuQhbi4p6woVq</code>
<b>‚óæÔ∏è–°—É–º–º–∞:</b> <code>–õ—é–±–∞—è</code>

<b>üìä –ö—É—Ä—Å:</b> <code>1 Doge - 0.08624 $ | 5.439 ‚ÇΩ</code>
 
<b>‚ùóÔ∏è–í–∞–∂–Ω–æ! - –ü–µ—Ä–µ–≤–æ–¥ –º–µ–Ω–µ–µ 20 Doge, –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—É!</b>'''
                await call.message.edit_caption(caption=text, reply_markup=menu.close_markup())
            
            if call.data == 'pay_qiwi':
                url, code, phone = await QiwiPay().deposit_qiwi(chat_id)
                text = mes.pay_qiwi.format(number=phone, code=code)
                await call.message.edit_caption(caption=text, reply_markup=menu.pay_qiwi_markup(url=url))
            
            if call.data == 'pay_payok':
                await call.message.edit_caption('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ', reply_markup=menu.close_markup())
                await state.set_state('payment_payok')
            
            if call.data == 'dpayok':
                await call.message.delete()
                await state.finish()

            if call.data == 'promocode':
                await ActivatePromo.promo.set()
                text = '<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b>'
                await call.message.answer(text=text, reply_markup=menu.kbcancel)
            

            if call.data == 'referral':
                name = await bot.get_me()
                txxt = """
‚≠êÔ∏è <b><i>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</i></b>

<i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ª—é–¥–µ–π –≤ –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ—Ç–µ </i><b>1‚ÇΩ</b> <i>–∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±–æ—Ç–∞</i>

üîó <i>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i> <code>https://t.me/{bot_login}?start={user_id}</code>

‚óΩÔ∏è<b>–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:</b> <code>{referals}</code> <b>—á–µ–ª
‚óΩÔ∏è–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏:</b> <code>{r_amount}‚ÇΩ</code>

"""
                text = txxt.format(bot_login=name.username,
                                        user_id=chat_id, referals=await amount_referals(chat_id), r_amount=round(float(await amount_referals(chat_id) * 1), 3))
                await call.message.edit_caption(caption=text, reply_markup=menu.gen_ref_kb(chat_id))
            
            if call.data == "why_scam":
                txt = """<b>‚ùóÔ∏è –í –Ω–æ—á—å 02.06.2022 –≥–æ–¥–∞ –≤ 0:38 –º—ã –ø–æ–ª—É—á–∏–ª–∏ –º–µ—Ç–∫—É ¬´SCAM¬ª.</b> 

<i>–í—Å–µ–º –≤–∞–º –∏–∑–≤–µ—Å—Ç–Ω–æ —á—Ç–æ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –∫–∞–∫ ¬´Qiwi –∫–æ—à–µ–ª—ë–∫¬ª –∏–º–µ–Ω–Ω–æ –æ–Ω –∏ —Å—Ç–∞–ª –ø—Ä–∏—á–∏–Ω–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∫–∏ –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. 

–ö–æ–º–ø–∞–Ω–∏—è brandsecurity.ru –∑–∞–Ω–∏–º–∞—é—â–µ–π—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º–æ–≥–æ ¬´–ø–∏—Ä–∞—Ç—Å–∫–æ–≥–æ¬ª –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—è–ª–∞ —á—å—é —Ç–æ –∑–∞—è–≤–∫—É –Ω–∞ –Ω–∞—à –±–æ—Ç. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã. –¢–∞–∫ –∫–∞–∫ –∫–æ–º–ø–∞–Ω–∏—è qiwi.com —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–¥–∞–∂–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–∞.</i>

<b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –∂–µ —Å–æ–º–Ω–µ–Ω–∏—è –Ω–∞–¥ –Ω–∞—à–∏–º –±–æ—Ç–æ–º –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –≤ –∫–∞–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤ </b><b>(<a href='https://t.me/end_soft'>—Ç—ã–∫–∞–π</a>)</b>"""
                await call.message.edit_caption(caption=txt, reply_markup=menu.ws_markup())

            if call.data == 'my_purchases':
                markup = await User(chat_id).purchases_history()
                await call.message.edit_caption(caption='–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:', reply_markup=markup)
            
            if call.data == 'crypto_curs':
                data = get("https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC,USDT,DOGE,DOT&tsyms=USD,RUB").json()
                txxt = f'''<b>üìà –í–∞–ª—é—Ç–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏:</b>

<b>‚ñ™Ô∏èBTC</b> - {data["BTC"]["USD"]} $ | {data["BTC"]["RUB"]} ‚ÇΩ
<b>‚ñ™Ô∏èETH</b> - {data["ETH"]["USD"]} $ | {data["ETH"]["RUB"]} ‚ÇΩ
<b>‚ñ™Ô∏èLTC</b> - {data["LTC"]["USD"]} $ | {data["LTC"]["RUB"]} ‚ÇΩ
<b>‚ñ™Ô∏èUSDT</b> - {data["USDT"]["USD"]} $ | {data["USDT"]["RUB"]} ‚ÇΩ
<b>‚ñ™Ô∏èDOGE</b> - {data["DOGE"]["USD"]} $ | {data["DOGE"]["RUB"]} ‚ÇΩ
<b>‚ñ™Ô∏èDOT</b> - {data["DOT"]["USD"]} $ | {data["DOT"]["RUB"]} ‚ÇΩ
'''
                await call.message.edit_caption(caption=txxt, reply_markup=menu.back_markup())

            if call.data.split(":")[0] == 'user_purchase':
                text, markup = await Product().info_purchase_history(call.data.split(":")[1])
                await call.message.delete()
                await call.message.answer(text=text, reply_markup=markup)

            if call.data == 'to_close':
                await call.message.delete()
            
            if call.data == 'to_menu':
                text = f'<b>üí≥ –ë–∞–ª–∞–Ω—Å:</b> {user.balance} RUB'
                await call.message.edit_caption(caption=text, reply_markup=menu.menu_markup())
            
            if call.data == 'cabinet':
                chat_id = call.from_user.id
                text = mes.cabinet.format(user_id=chat_id, login=call.from_user.get_mention(as_html=True), data=User(chat_id).get_days(), balance=User(chat_id).balance)
                await call.message.edit_caption(caption=text, reply_markup=menu.cabinet_markup())
            
            if call.data == 'info':
                chat_id = call.from_user.id
                text = mes.infomation
                
                await call.message.edit_caption(caption=text, reply_markup=menu.help_markup())
                
            if call.data == 'rules_market':
                text = mes.rules
                await call.message.edit_text(text=text, reply_markup=menu.close_markup())
            
            if call.data == "pclient":
                s = await get_user_sum(call.from_user.id)
                if int(s) >= 0:
                    await call.message.edit_caption("""<b>üü© –í—Ö–æ–¥ –≤ —á–∞—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω! 

üìù –ü—Ä–∞–≤–∏–ª–∞:</b>
<i>‚îú –û–±–º–∞–Ω –∞–¥–º–∏–Ω–∞ - –±–∞–Ω 
‚îú –ë–µ–∑ —Ç—É–ø—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - –±–∞–Ω 
‚îú –°–ø–∞–º –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ - –±–∞–Ω 
‚îú –†–µ–∫–ª–∞–º–∞ / —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ - –±–∞–Ω 
‚îú –ù–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–∞–≥–∞–∑–∏–Ω–∞ - –±–∞–Ω 
‚îî –õ—é–±–æ–π –≤–∏–¥ —Å–∫–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ - –±–∞–Ω 

üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: https://t.me/end_soft</i>""", reply_markup=menu.back_markup())
                else:
                    await call.message.edit_caption("""<b>‚ùå –í—Ö–æ–¥ –≤ —á–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ 

‚ô¶Ô∏è –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç:</b>
<i>‚îî –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π -> 75‚ÇΩ –∏ –±–æ–ª–µ–µ‚Ä¶</i>""",reply_markup=menu.back_markup())
            
            if call.data.split(':')[0] == 'not_bot':
                print(call.data)
                await call.message.delete()
                await call.message.answer('<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!\n–ù–∞–∂–º–∏ /start –µ—â–µ —Ä–∞–∑.</b>')
                userx = User(str(call.data.split(":")[1]).split("_")[1])
                await userx.update_balance(float(1))
                await bot.send_message(str(call.data.split(":")[1]).split("_")[1], f'<b>üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ</b> <code>1</code>‚ÇΩ <b>–∑–∞</b> {call.from_user.get_mention(name="—Ä–µ—Ñ–µ—Ä–∞–ª–∞", as_html=True)}')
                await bot.send_message(chat_id=config.config("admin_group"), text=f'''üíé <b>–ü—Ä–∏–≥–ª–∞—à—ë–Ω –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª 

‚óΩÔ∏è–†–µ—Ñ–µ—Ä: {userx.username}
‚óΩÔ∏èid:</b> <code>{userx.user_id}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚óΩÔ∏è<b>–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π: @{user.username}
‚óΩÔ∏èId:</b> <code>{user.user_id}</code>
''')
                
                

            if call.data == 'to_catalog':
                text = f'<b>üí≥ –ë–∞–ª–∞–Ω—Å:</b> {user.balance} RUB'
                await call.message.edit_caption(caption=text, reply_markup=await Catalog().get_menu())

            if call.data.split(":")[0] == 'catalog':
                text = f'<b>üí≥ –ë–∞–ª–∞–Ω—Å:</b> {user.balance} RUB\n<b>üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>'
                if call.data.split(":")[1] == 'proxy':
                    text = f'<b>üí≥ –ë–∞–ª–∞–Ω—Å:</b> {user.balance} RUB\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏:</b>'
                    markup = Proxy().proxy_type_menu()
                elif call.data.split(":")[1] == 'cheating':
                    text = f'<b>üí≥ –ë–∞–ª–∞–Ω—Å:</b> {user.balance} RUB\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏:</b>'
                    markup = await SMMPanel().cheating_menu()
                else:
                    markup = await SubCatalog().get_subcategory_menu(call.data.split(":")[1])
                await call.message.edit_caption(caption=text, reply_markup=markup)

            if call.data.split(":")[0] == 'subcatalog':
                markup = await Product().get_product_menu(call.data.split(":")[1])
                await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id,
                                            reply_markup=markup)

            if call.data.split(":")[0] == 'product':
                info = await Product().get_product(call.data.split(":")[1])
                products = await Product().get_amount_products(call.data.split(":")[1])
                text = mes.product.format(name = info[2], price = info[3],
                            balance = user.balance, description = info[4], amount_product = products)
                markup = await Product().buy_product_markup(call.data.split(":")[1])
                await call.message.edit_caption(caption=text, reply_markup=markup)

            if call.data.split(":")[0] == 'product_buy':
                products = await Product().get_amount_products(call.data.split(":")[1])
                if int(products) > 0:
                    markup = await Product().get_buy_menu(call.data.split(":")[1])
                    await call.message.edit_reply_markup(reply_markup=markup)
                else:
                    await call.answer('–ü–æ—Ö–æ–∂–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...')
            
            if call.data.split(":")[0] == "product_ask":
                Name = await Product().get_product(call.data.split(":")[1])
                txtt = f"""<b>‚ùì–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ–≤–æ–¥—É —Ç–æ–≤–∞—Ä–∞ {Name[2]} 

–í–∞–∂–Ω–æ:</b> <i>–Ω–µ –ø–∏—à–∏—Ç–µ —á—É—à—å, –Ω–µ –ø–∏—à–∏—Ç–µ –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–º–µ–Ω, –Ω–µ –ø–∏—à–∏—Ç–µ –ø–æ–≤–æ–¥—É —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–µ–∫–ª–∞–º—ã), –ø–∏—à–∏—Ç–µ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—ã—Ä–∞–∂–∞—è —Å–≤–æ–π —Å–º—ã—Å–ª</i>

<b>üìß –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...</b>"""
                await call.message.edit_caption(txtt, parse_mode="HTML")
                await state.set_state('asksend')
                await state.update_data(pname=Name[2])
            
            if call.data.split(":")[0] == "lr":
                Name = await Product().get_product(call.data.split(":")[1])
                txtt = '''<b>‚ùóÔ∏è –í–∞–∂–Ω–æ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞ –æ–ø–∏—à–∏—Ç–µ:</b>

<i>- –¢–æ–≤–∞—Ä 
- –ï–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å 
- –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ª–∏ –æ–Ω –≤–∞–º 
- –û—Ç–∑—ã–≤ –æ —Å–µ—Ä–≤–∏—Å–µ Cloud shop

üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</i>
'''
                await call.message.edit_text(txtt, parse_mode="HTML")
                await state.set_state('sendreview')
                await state.update_data(pname=Name[2])

            if call.data.split(':')[0] == 'buy_menu_update':
                products = await Product().get_amount_products(call.data.split(":")[1])
                product_id, amount, price, update = call.data.split(":")[1], int(call.data.split(":")[2]), \
                    call.data.split(":")[3], int(call.data.split(":")[4])
                
                if (amount + update) > 0:
                    if (amount + update) <= 25:
                        if products >= amount + update:
                            markup = await Product().get_buy_menu(product_id, amount, price, update)
                            await call.message.edit_reply_markup(reply_markup=markup)
                        else:
                            await call.answer('‚ùï –¢–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç')
                    else:
                        await call.answer('‚ùï –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞ —Ä–∞–∑ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å 25 —à—Ç')
                else:
                    await call.answer('‚ùï –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ 1 —à—Ç.')    

            if call.data.split(":")[0] == 'buy_product':
                product_id, amount, price = call.data.split(":")[1], int(call.data.split(":")[2]), float(call.data.split(":")[3])
                info = await Product().get_product(call.data.split(":")[1])
                if price <= float(user.balance):
                    products = await Product().get_amount_products(product_id)
                    if amount <= products:
                        await user.update_balance(-price)
                        await user.up_purchases(1)
                        file_name = await Product().get_products(product_id, amount)
                        with open(file=file_name, mode='rb') as txt:
                            await call.message.answer(text=mes.access_purchase)
                            await call.message.answer_document(document=txt, caption='–í–∞—à —Ç–æ–≤–∞—Ä')
                            await call.message.answer(f'''üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π —Ç–æ–≤–∞—Ä–∞ {info[2]}</b>

<i>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –ø–æ–ª—É—á–∏—Ç—å –º–∞–ª–µ–Ω—å–∫–∏–π –±–æ–Ω—É—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏! 

–í–∞–∂–Ω–æ: –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –∫—É–ø–∏–ª–∏, –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ª–∏ –≤–∞–º —Ç–æ–≤–∞—Ä, —Ä–∞–±–æ—á–∏–π –ª–∏ –æ–Ω –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏! 
</i>
''', reply_markup=menu.gen_cb_kb(call.data.split(":")[1]))

                        text = f'''<b>üõç –ö—É–ø–ª–µ–Ω —Ç–æ–≤–∞—Ä 

‚óΩÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}
‚óΩÔ∏èID: {chat_id}
‚óΩÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {info[2]}
‚óΩÔ∏è–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {price} —Ä—É–±.
‚óΩÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: {products} —à—Ç.</b>
'''
                        product = open(file_name, 'rb')
                        await bot.send_document(chat_id=config.config("admin_group"), document=product, caption=text)

                        with open(file_name, 'r', encoding='UTF-8') as txt:
                            for i in txt:
                                await Product().write_history(chat_id, product_id, i)
                        os.remove(file_name)

                    else:
                        await call.answer('–¢–æ–≤–∞—Ä–∞ –≤ —Ç–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±–æ–ª—å—à–µ –Ω–µ—Ç!')
                else:
                    await call.answer('–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!')

            if call.data.split(":")[0] == 'proxy_type':
                markup = Proxy().proxy_time_menu(call.data.split(":")[1])
                text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –ø—Ä–æ–∫—Å–∏:</b>'
                await call.message.edit_caption(caption=text, reply_markup=markup)

            if call.data.split(":")[0] == 'proxy_time':
                markup = Proxy().proxy_country_menu(call.data.split(":")[1], call.data.split(":")[2])
                text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∞—Ä–µ–Ω–¥—ã –ø—Ä–æ–∫—Å–∏:</b>'
                await call.message.edit_caption(caption=text, reply_markup=markup)

            if call.data.split(":")[0] == 'proxy_country':
                markup = Proxy().proxy_count_menu(call.data.split(":")[1], call.data.split(":")[2], call.data.split(":")[3])
                text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>'
                await call.message.edit_caption(caption=text, reply_markup=markup)
            
            if call.data.split(":")[0] == 'proxy_—Åount':
                text, markup = await Proxy().proxy_buy_info(call.data.split(":")[1], call.data.split(":")[2], 
                                call.data.split(":")[3], call.data.split(":")[4])
                await call.message.edit_caption(caption=text, reply_markup=markup)

            if call.data.split(":")[0] == 'proxy_buy':
                msg = await call.message.edit_caption(caption='<b>‚ôªÔ∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ...</b>', reply_markup=menu.close_markup())
                await Proxy().buy_proxy(bot, chat_id, call.data.split(":")[1], call.data.split(":")[2], call.data.split(":")[3],
                                    call.data.split(":")[4], call.data.split(":")[5], msg.message_id)

            if call.data.split(":")[0] == 'cheat_serivce':
                text = '<b> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏:</b>'
                markup = await SMMPanel().cheat_type_menu(call.data.split(":")[1])
                await call.message.edit_caption(caption=text, reply_markup=markup)

            if call.data.split(":")[0] == 'cheat_type':
                text = '<b> –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º:</b>'
                markup = await SMMPanel().cheat_order_menu(call.data.split(":")[1], call.data.split(":")[2])
                await call.message.edit_caption(caption=text, reply_markup=markup)

            if call.data.split(":")[0] == 'cheat_order':
                text = await SMMPanel().cheat_messages(call.data.split(":")[1], call.data.split(":")[2],
                        call.data.split(":")[3])
                markup = await SMMPanel().cheat_buy_menu(call.data.split(":")[1], call.data.split(":")[2],
                        call.data.split(":")[3])
                await call.message.edit_caption(caption=text, reply_markup=markup)

            if call.data.split(":")[0] == 'cheat_buy_update':
                service, cheat_type, order, amount, price, update = call.data.split(":")[1], call.data.split(":")[2], \
                    call.data.split(":")[3], int(call.data.split(":")[4]), float(call.data.split(":")[5]), int(call.data.split(":")[6])
                orders = SMMPanel().cheat.get(f'{service}').get(cheat_type)
                order_info = orders.get(order)
                
                if (amount + update) >= int(order_info.get('min')):
                    if int(order_info.get('max')) >= amount + update:
                        markup = await SMMPanel().cheat_buy_menu(service, cheat_type, order, amount, price, update)
                        await call.message.edit_reply_markup(reply_markup=markup)
                    else:
                        await call.answer(f'‚ùï –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞ —Ä–∞–∑ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å {order_info.get("max")}')
                else:
                    await call.answer(f'‚ùï –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {order_info.get("min")}')
                await call.answer()

            if call.data.split(":")[0] == 'cheat_buy':
                text = f'<b>‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ –≤–≤–æ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —É—Å–ª—É–≥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ –≤–∞—à–∞ —É—Å–ª—É–≥–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.</b>'
                service, cheat_type, order, amount, price = call.data.split(":")[1], call.data.split(":")[2], \
                    call.data.split(":")[3], call.data.split(":")[4], call.data.split(":")[5]
                await BuyCheating.link.set()
                async with state.proxy() as data:
                    data['service'] = service
                    data['type'] = cheat_type
                    data['order'] = order
                    data['count'] = amount
                await call.message.edit_caption(caption=text, reply_markup=menu.close_markup())
                await call.message.answer("<b>üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∫—É–¥–∞ –±—É–¥–µ–º –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å:</b>")

            if call.data.split(":")[0] == 'cheat_count':
                await call.message.delete()
                service, cheat_type, order = call.data.split(":")[1], call.data.split(":")[2], \
                    call.data.split(":")[3]
                await BuyCheating.count.set()
                async with state.proxy() as data:
                    data['service'] = service
                    data['type'] = cheat_type
                    data['order'] = order
                await call.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥–∏:</b>')


@vip.message_handler(state='payment_payok')
async def payment_payok2(m: types.Message, state: FSMContext):
    try:
        info = f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ_{randint(111, 999)}'
        markup = await menu.payok_kb(float(m.text), f'{m.from_user.id}_{randint(111, 999)}', info)
        await m.answer(f'''üí∞ <b>–°–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ¬´Payok.io¬ª</b>

<i>- Qiwi –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ 
- CARD –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ 
- –ë–∏—Ç–∫–æ–∏–Ω 
- –ú–µ–≥–∞—Ñ–æ–Ω 
- Doge –∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</i> 

üíµ <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>{float(m.text)} ‚ÇΩ</code>
''', reply_markup=markup, parse_mode="HTML")
        await state.set_state('paycheck')
        await state.update_data(sumx=float(m.text), desc=info)
    except ValueError:
        await m.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.', reply_markup=menu.close_markup())
        await state.finish()



