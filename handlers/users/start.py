from aiogram import types

from aiogram.types.inline_keyboard import InlineKeyboardButton, InlineKeyboardMarkup
from aiosqlite import connect
from data import first_join, User, messages, get_user, register_user, add_new_group, add_select_groups, delete_groups
from middlewares.throttling import rate_limit
from filters import IsPrivate, IsAdmin, IsSubscribed
from keyboards import defaut as key, inline as menu
from loader import bot, vip
from utils import config, market

async def check_sub(m: types.Message):
    spisok = add_select_groups()
    url_id = [url_id[2] for url_id in spisok]
    if not spisok:
        return True
    else:
        for i in range(len(spisok)): 
            res = await bot.get_chat_member(url_id[i], m.from_user.id)
            stat = res.status
        if stat in ("member", "administrator", "creator"):
            return True
        else:
            print(f"[SUB] STATUS: {stat} | USER = {m.from_user.id}")
            return False
            await m.answer('<b>üîµ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ üëá</b>', reply_markup=menu.kbsub)
        

@vip.callback_query_handler(text='subbed')
async def subbed(c: types.CallbackQuery):
    if await check_sub(c) == True:
        await c.answer()
        await c.message.answer('<b>‚úîÔ∏è –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω</b>', parse_mode='HTML')
        await c.message.answer(f'<b>‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CLOUD SHOP</b>\n\n'
						f'<code>–î–∞–Ω–Ω—ã–π –±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤!</code>\n\n'
						f'üõ† –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏',
						reply_markup = key.main_menu())  
    else:
        await c.answer()
        await c.message.answer('<b>üîµ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –Ω–∏–∂–µ üëá</b>', parse_mode='HTML', reply_markup=menu.kbsub)

@rate_limit(limit=1)
@vip.message_handler(IsPrivate(), commands=['start'])
async def start_handler(msg: types.Message):
    print(f"[START PAYLOAD] = {msg.text}")
    refcode = msg.text.split(' ')[1] if " " in msg.text else ''
    print(f'[REFCODE] = {refcode}')
    if "p_" in refcode:
        user = User(msg.from_user.id)
        info = await market.Product().get_product(msg.text[7:])
        products = await market.Product().get_amount_products(msg.text[7:])
        txt = messages.product.format(name = info[2], price = info[3],
                    balance = user.balance, description = info[4], amount_product = products)
        markup = InlineKeyboardMarkup().row(InlineKeyboardButton(text="üñ≤ –ö—É–ø–∏—Ç—å", callback_data=f'product_buy:{msg.text[7:]}'))
        markup.row(InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='payments'))
        await msg.answer_photo(photo="https://i.imgur.com/kePY9XC.jpg", caption=txt, reply_markup=markup)
    elif 'p_' not in refcode and refcode != '':
        if await get_user(msg.from_user.id) == False:
            txxt = f'''<b>üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

‚óΩÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.get_mention()}
‚óΩÔ∏èID: {msg.from_user.id}</b>'''
            await register_user(msg.from_user.id, refcode, msg.from_user.username)
            await msg.answer('<b>üïπ –î–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç</b>', reply_markup=menu.gen_nb_kb(msg.from_user.id, refcode))
            await bot.send_message(config.config('admin_group'), txxt)
        else:
            await msg.answer('<b>üíî –î–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ</b>')
    else:
        if await get_user(msg.from_user.id) == False:
            txxt = f'''<b>üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

‚óΩÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.get_mention()}
‚óΩÔ∏èID: {msg.from_user.id}</b>'''
            await bot.send_message(config.config('admin_group'), txxt)
            await register_user(msg.from_user.id, 0, msg.from_user.username)
            if await check_sub(msg):
                await msg.answer(f'<b>‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CLOUD SHOP</b>\n\n'
							f'<code>–î–∞–Ω–Ω—ã–π –±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤!</code>\n\n'
						 	f'üõ† –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏',
							reply_markup = key.main_menu())
            """
            else:
                
                await msg.answer('''‚≠êÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞ CLOUD SHOP</b> 

                                <i>- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ 
                                - –†–∞–∑–¥–∞—á–∞ –ø—Ä–æ–º–æ –∫–æ–¥–æ–≤ 
                                - –û–ø—Ä–æ—Å—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
                                - –î—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ—Å—Ç—ã</i>

                                ''', reply_markup=menu.kbsub, parse_mode='HTML')"""
        else:
            if await check_sub(msg):
                await msg.answer(f'*{msg.from_user.full_name}, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞!*', 
								parse_mode='Markdown', reply_markup = key.main_menu())
                """
            else:
                await msg.answer('''‚≠êÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞ CLOUD SHOP</b> 

<i>- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ 
- –†–∞–∑–¥–∞—á–∞ –ø—Ä–æ–º–æ –∫–æ–¥–æ–≤ 
- –û–ø—Ä–æ—Å—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
- –î—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ—Å—Ç—ã</i>

''', reply_markup=menu.kbsub, parse_mode='HTML')
        
"""
"""
@rate_limit(limit=1)
@vip.message_handler(IsPrivate(), commands=['start'])
async def start_handler(msg: types.Message):
	#status, invite = await first_join(msg.from_user.id, msg.from_user.username, msg.text[7:])
	#if msg.text[7:] is not None and msg.text[7:] != 0 and msg.text[7:] != '':
	#	await msg.answer('<b>üïπ –î–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç</b>', reply_markup=menu.gen_nb_kb(msg.from_user.id, invite))
	if await check_sub(msg):
		status, invite = await first_join(msg.from_user.id, msg.from_user.username, msg.text[7:])
		if status != False:
			txxt = f'''<b>üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

‚óΩÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg.from_user.get_mention()}
‚óΩÔ∏èID: {msg.from_user.id}</b>'''
			await msg.answer(f'<b>‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CLOUD SHOP</b>\n\n'
							f'<code>–î–∞–Ω–Ω—ã–π –±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–æ —Å–∫—Ä–∏–ø—Ç–æ–≤!</code>\n\n'
						 	f'üõ† –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏',
							reply_markup = key.main_menu())
			await bot.send_message(config.config('admin_group'), f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.get_mention()} | {msg.from_user.id}')
			if invite != 0:
				await bot.send_message(invite, f'–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {msg.from_user.get_mention(as_html=True)} !')
				await msg.answer('<b>üïπ –î–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç</b>', reply_markup=menu.gen_nb_kb(msg.from_user.id, 0))
		else:
			if User(msg.from_user.id).ban == 'no':
				if msg.text[7:] != '' and msg.text[7:].startswith("p_"):
					user = User(msg.from_user.id)
					info = await market.Product().get_product(msg.text[7:])
					products = await market.Product().get_amount_products(msg.text[7:])
					txt = messages.product.format(name = info[2], price = info[3],
                            balance = user.balance, description = info[4], amount_product = products)
					markup = InlineKeyboardMarkup().row(InlineKeyboardButton(text="üñ≤ –ö—É–ø–∏—Ç—å", callback_data=f'product_buy:{msg.text[7:]}'))
					markup.row(InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='payments'))
					await msg.answer_photo(photo="https://i.imgur.com/kePY9XC.jpg", caption=txt, reply_markup=markup)
				else: await msg.answer(f'*{msg.from_user.full_name}, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞!*', 
								parse_mode='Markdown', reply_markup = key.main_menu())
	else:
		await msg.answer('''‚≠êÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞ CLOUD SHOP</b> 

<i>- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ 
- –†–∞–∑–¥–∞—á–∞ –ø—Ä–æ–º–æ –∫–æ–¥–æ–≤ 
- –û–ø—Ä–æ—Å—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
- –î—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ—Å—Ç—ã</i>''', reply_markup=menu.kbsub, parse_mode='HTML')
"""
@vip.callback_query_handler(text='showlinks')
async def lisst(c: types.CallbackQuery):
    async with connect("./data/database.db") as db:
        select = await db.execute("SELECT * FROM product")
        fall = await select.fetchall()
        botx = await bot.get_me()
        s = []
        for i in fall:
            s.append(f'<a href="https://t.me/{botx.username}?start={i[0]}">–ö–ª–∏–∫</a> - {i[2]}')
        await c.message.answer('\n'.join(s), parse_mode='HTML')